当语句以冒号“:”结尾时，缩进的语句视为代码块。
整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！）
Python还允许用r''表示''内部的字符串默认不转义
多行字符串'''...'''还可以在前面加上r使用
一个布尔值只有True、False两种值
空值是Python里一个特殊的值，用None表示。
这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。
list：classmates = ['Michael', 'Bob', 'Tracy']
插入到末尾：classmates.append('Adam')
插入到指定位置：classmates.insert(i, 'Jack')
删除末尾：classmates.pop()
删除指定位置：classmates.pop(i)
替换指定位置：classmates[i] = 'Sarah'
list元素的数据类型可以不同，元素也可以是另一个list。
求长度：len(classmate)
tuple一旦初始化就不能修改：classmates = ('Michael', 'Bob', 'Tracy')
1个元素的tuple：t = (1,)
if x: 只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False。
for x in ...循环就是把每个元素代入变量x，然后执行缩进块的语句。
range(101)就可以生成0-100的整数序列 for x in range(101):
raw_input()读取的内容永远以字符串的形式返回
dict的key必须是不可变对象：
>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
>>> d['Michael']
95
写入：d['Adam'] = 67
通过in判断key是否存在：
>>> 'Thomas' in d
False
通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
>>> d.get('Thomas')
>>> d.get('Thomas', -1)
-1
删除一个key：d.pop('Bob')
set和dict类似，也是一组key的集合，但不存储value：
s = set([1, 2, 3])
重复元素在set中自动被过滤，通过add(key)方法可以添加元素到set中，重复添加不会有效果：s.add(4)
通过remove(key)方法可以删除元素：s.remove(4)
set的交：& 并：|
>>> a = abs # 变量a指向abs函数
>>> a(-1) # 所以也可以通过a调用abs函数
没有return语句，执行结束返回None
return None可以简写为return
空语句：pass
参数类型检测：
if not isinstance(x, (int, float)):
	raise TypeError('bad operand type')
返回多值其实就是返回一个tuple
不按顺序提供部分默认参数时，需要把参数名写上。
定义默认参数要牢记一点：默认参数必须指向不变对象！
定义可变参数：def calc(*numbers):
已经有一个list或者tuple，要调用一个可变参数：calc(*nums)
关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict：def person(name, age, **kw):
调用：person('Adam', 45, gender='M', job='Engineer')
可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：
>>> kw = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, city=kw['city'], job=kw['job'])
简化：
>>> kw = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, **kw)
在Python中定义函数，可以用必选参数、默认参数、可变参数和关键字参数，这4种参数都可以一起使用，或者只用其中某些，但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数。
def func(a, b, c=0, *args, **kw):
调用：func(1, 2, 3, 'a', 'b', x=99)
通过一个tuple和dict调用该函数：func(*args, **kw)
*args是可变参数，args接收的是一个tuple；
**kw是关键字参数，kw接收的是一个dict。
以及调用函数时如何传入可变参数和关键字参数的语法：
可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；
关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：func(**{'a': 1, 'b': 2})。
防止堆栈溢出：尾递归
切片：L[1:10:2] list，tuple，str都可以切片
迭代dict：for key in d:
默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.itervalues()，如果要同时迭代key和value，可以用for k, v in d.iteritems()。
迭代字符串：for ch in 'ABC':
何判断一个对象是不是可迭代对象：
from collections import Iterable
isinstance('abc', Iterable)
Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：
for i, value in enumerate(['A', 'B', 'C']):
上述同时迭代两个变量：for x, y in [(1, 1), (2, 4), (3, 9)]:
列表生成式：[x * x for x in range(1, 11)]
可以加判断：[x * x for x in range(1, 11) if x % 2 == 0]
还可以使用两层循环，可以生成全排列：[m + n for m in 'ABC' for n in 'XYZ']
>>> import os # 导入os模块，模块的概念后面讲到
>>> [d for d in os.listdir('.')] # os.listdir可以列出文件和目录
使用两个变量来生成list：
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> [k + '=' + v for k, v in d.iteritems()]
一边循环一边计算的机制，称为生成器，把列表生成式的[]改成()：g = (x * x for x in range(10))
g.next()输出下一个元素
遍历生成器：for n in g:
一个函数定义中包含yield关键字，那么它就是一个生成器
把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。
map()函数接收两个参数，一个是函数，一个是序列，map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回：map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9])
reduce把一个函数作用在一个序列[x1, x2, x3...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
str转换为int的函数：
def str2int(s):
	def fn(x, y):
		return x * 10 + y
	def char2num(s):
		return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
	return reduce(fn, map(char2num, s))
进一步简化成：
def char2num(s):
	return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
def str2int(s):
	return reduce(lambda x,y: x*10+y, map(char2num, s))
